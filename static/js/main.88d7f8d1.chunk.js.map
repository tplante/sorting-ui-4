{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["options","candidate","id","selected","reorder","list","startIndex","endIndex","result","Array","from","_result$splice","splice","removed","Object","slicedToArray","buttonStyles","width","padding","concat","grid","textAlign","fontWeight","cursor","borderRadius","optionStyles","itemStyles","display","marginRight","backgroundColor","color","dropdownStyles","fontSize","submitStyles","objectSpread","marginTop","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleDragEnd","dragEvent","container","assertThisInitialized","current","destination","source","draggableId","menu","querySelector","menus","querySelectorAll","preventReorder","value","some","m","i","index","items","state","setState","handleChange","event","target","_event$target","previousValue","_assertThisInitialize2","_assertThisInitialize3","menuId","parseInt","slice","hasPreviousValue","previousOptionIndex","findIndex","o","optionIndex","length","push","forEach","menuValue","pop","option","find","handleSubmit","submitted","createRef","_this2","react_default","a","createElement","ref","style","react_beautiful_dnd_esm","onDragEnd","droppableId","provided","snapshot","innerRef","isDraggingOver","margin","map","item","key","assign","draggableProps","dragHandleProps","isDragging","draggableStyle","userSelect","background","htmlFor","onChange","defaultValue","j","disabled","placeholder","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.88d7f8d1.chunk.js","sourcesContent":["import React, { Component, createRef } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\nconst options = [\n  { candidate: \"Barack Obama\", id: \"option-0\", selected: false },\n  { candidate: \"George Bush\", id: \"option-1\", selected: false },\n  { candidate: \"Hillary Clinton\", id: \"option-2\", selected: false },\n  { candidate: \"Bernie Sanders\", id: \"option-3\", selected: false },\n  { candidate: \"Marco Rubio\", id: \"option-4\", selected: false },\n  { candidate: \"George Washington\", id: \"option-5\", selected: false },\n  { candidate: \"John Adams\", id: \"option-6\", selected: false },\n  { candidate: \"Abraham Lincoln\", id: \"option-7\", selected: false },\n  { candidate: \"Franklin D. Roosevelt\", id: \"option-8\", selected: false },\n  { candidate: \"Ron Swanson\", id: \"option-9\", selected: false }\n];\n\n// Reorder the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\nconst grid = 20;\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  userSelect: \"none\",\n  padding: grid,\n  margin: `0 0 ${grid / 2}px 0`,\n  // Change background colour if dragging\n  background: isDragging ? \"lightgreen\" : \"#d8d8d8\",\n  // Styles to apply on draggables\n  ...draggableStyle\n});\nconst getListStyle = isDraggingOver => ({\n  width: 330,\n  margin: \"0 auto\"\n});\n\nconst buttonStyles = {\n  width: \"100%\",\n  padding: `${grid / 2}px 0`,\n  textAlign: \"center\",\n  fontWeight: \"bold\",\n  cursor: \"pointer\",\n  borderRadius: 3\n};\nconst optionStyles = {\n  textAlign: \"left\",\n  fontWeight: \"bold\",\n  cursor: \"pointer\",\n  borderRadius: 3,\n  padding: 0\n};\nconst itemStyles = {\n  display: \"inline-block\",\n  textAlign: \"center\",\n  width: 20,\n  marginRight: grid,\n  padding: grid,\n  backgroundColor: \"#2c5c6c\",\n  color: \"white\",\n  borderRadius: \"3px 0 0 3px\",\n  cursor: \"pointer\"\n};\nconst dropdownStyles = {\n  fontSize: 16\n};\nconst submitStyles = {\n  ...buttonStyles,\n  marginTop: 20,\n  backgroundColor: \"#00b06f\",\n  color: \"white\"\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [options[0]],\n      options,\n      submitted: false\n    };\n    this.container = createRef();\n  }\n\n  handleDragEnd = dragEvent => {\n    const {\n      container: { current: container }\n    } = this;\n    const { destination, source, draggableId } = dragEvent;\n    const menu = container.querySelector(`#${draggableId} select`);\n    // Convert NodeList to array\n    const menus = Array.from(container.querySelectorAll(\"select\"));\n    const preventReorder =\n      menu.value === \"skip\" ||\n      menus.some((m, i) => m.value === \"skip\" && destination.index === i);\n    // Dropped outside the list or an empty option is not last index\n    if (!destination || preventReorder) {\n      return;\n    }\n    const items = reorder(this.state.items, source.index, destination.index);\n    this.setState({ items });\n  };\n\n  handleChange = event => {\n    const {\n      target,\n      target: { value, previousValue, id }\n    } = event;\n    const {\n      container: { current: container },\n      state: { options, items }\n    } = this;\n    const menus = container.querySelectorAll(\"select\");\n    const menuId = parseInt(id.slice(-1));\n    const hasPreviousValue = previousValue && previousValue !== \"skip\";\n    if (hasPreviousValue) {\n      const previousOptionIndex = options.findIndex(\n        o => o.candidate === previousValue\n      );\n      options[previousOptionIndex].selected = false;\n    }\n    if (value !== \"skip\") {\n      const optionIndex = options.findIndex(o => o.candidate === value);\n      options[optionIndex].selected = true;\n      if (!hasPreviousValue && menuId < options.length - 1) {\n        items.push(options[menuId + 1]);\n      }\n    } else if (hasPreviousValue) {\n      menus.forEach((menu, i) => {\n        const { value: menuValue } = menu;\n        if (i > menuId) {\n          items.pop();\n          const option = options.find(o => o.candidate === menuValue);\n          if (option) {\n            option.selected = false;\n          }\n        }\n      });\n    }\n    target.previousValue = value;\n    this.setState({ options, items });\n  };\n\n  handleSubmit = () => {\n    this.setState({ submitted: !this.state.submitted });\n  };\n\n  render() {\n    return (\n      <div ref={this.container}>\n        <h1 style={{ textAlign: \"center\" }}>Rank your favorite candidates</h1>\n        <DragDropContext onDragEnd={this.handleDragEnd}>\n          <Droppable droppableId=\"droppable\">\n            {(provided, snapshot) => (\n              <form\n                ref={provided.innerRef}\n                style={getListStyle(snapshot.isDraggingOver)}\n              >\n                {this.state.items.map((item, i) => (\n                  <Draggable key={item.id} draggableId={item.id} index={i}>\n                    {(provided, snapshot) => (\n                      <div\n                        id={`option-${i}`}\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        style={{\n                          ...getItemStyle(\n                            snapshot.isDragging,\n                            provided.draggableProps.style\n                          ),\n                          ...optionStyles\n                        }}\n                        key={item.id}\n                      >\n                        <label style={itemStyles} htmlFor={`menu-${i}`}>\n                          {i + 1}\n                        </label>\n                        <select\n                          id={`menu-${i}`}\n                          style={dropdownStyles}\n                          onChange={this.handleChange}\n                        >\n                          <option defaultValue value=\"skip\">\n                            Select an option (or skip)\n                          </option>\n                          {this.state.options.map((o, j) => (\n                            <option\n                              key={o.id}\n                              value={o.candidate}\n                              disabled={o.selected}\n                            >\n                              {o.candidate}\n                            </option>\n                          ))}\n                        </select>\n                      </div>\n                    )}\n                  </Draggable>\n                ))}\n                {provided.placeholder}\n                <div onClick={this.handleSubmit} style={submitStyles}>\n                  {this.state.submitted ? \"Nice!\" : \"Submit\"}\n                </div>\n              </form>\n            )}\n          </Droppable>\n        </DragDropContext>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}