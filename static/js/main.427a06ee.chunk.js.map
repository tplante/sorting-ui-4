{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["options","candidate","id","selected","reorder","list","startIndex","endIndex","result","Array","from","_result$splice","splice","removed","Object","slicedToArray","optionStyles","textAlign","fontWeight","cursor","borderRadius","padding","itemStyles","display","marginRight","backgroundColor","color","dropdownStyles","fontSize","submitStyles","objectSpread","width","marginTop","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onDragEnd","destination","items","state","source","index","setState","handleChange","event","target","_event$target","value","previousValue","_assertThisInitialize","assertThisInitialized","container","current","_assertThisInitialize2","menus","querySelectorAll","menuId","parseInt","slice","hasPreviousValue","previousOptionIndex","findIndex","o","optionIndex","length","push","forEach","menu","i","menuValue","pop","option","find","handleSubmit","submitted","createRef","_this2","react_default","a","createElement","ref","style","react_beautiful_dnd_esm","droppableId","provided","snapshot","innerRef","isDraggingOver","margin","map","item","key","draggableId","assign","draggableProps","dragHandleProps","isDragging","draggableStyle","userSelect","grid","concat","background","htmlFor","onChange","defaultValue","j","disabled","placeholder","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.427a06ee.chunk.js","sourcesContent":["import React, { Component, createRef } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\nconst options = [\n  { candidate: \"Barack Obama\", id: \"option-0\", selected: false },\n  { candidate: \"George Bush\", id: \"option-1\", selected: false },\n  { candidate: \"Hillary Clinton\", id: \"option-2\", selected: false },\n  { candidate: \"Bernie Sanders\", id: \"option-3\", selected: false },\n  { candidate: \"Marco Rubio\", id: \"option-4\", selected: false },\n  { candidate: \"George Washington\", id: \"option-5\", selected: false },\n  { candidate: \"John Adams\", id: \"option-6\", selected: false },\n  { candidate: \"Abraham Lincoln\", id: \"option-7\", selected: false },\n  { candidate: \"Franklin D. Roosevelt\", id: \"option-8\", selected: false },\n  { candidate: \"Ron Swanson\", id: \"option-9\", selected: false }\n];\n\n// Reorder the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\nconst grid = 8;\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  userSelect: \"none\",\n  padding: grid * 2,\n  margin: `0 0 ${grid}px 0`,\n  // Change background colour if dragging\n  background: isDragging ? \"lightgreen\" : \"#d8d8d8\",\n  // Styles to apply on draggables\n  ...draggableStyle\n});\nconst getListStyle = isDraggingOver => ({\n  width: 250,\n  margin: \"0 auto\"\n});\n\nconst buttonStyles = {\n  width: \"100%\",\n  padding: \"8px 0\",\n  textAlign: \"center\",\n  fontWeight: \"bold\",\n  cursor: \"pointer\",\n  borderRadius: 3\n};\nconst optionStyles = {\n  textAlign: \"left\",\n  fontWeight: \"bold\",\n  cursor: \"pointer\",\n  borderRadius: 3,\n  padding: 0\n};\nconst itemStyles = {\n  display: \"inline-block\",\n  marginRight: 8,\n  padding: 8,\n  backgroundColor: \"#2c5c6c\",\n  color: \"white\",\n  borderRadius: \"3px 0 0 3px\",\n  cursor: \"pointer\"\n};\nconst dropdownStyles = {\n  fontSize: 15\n};\nconst submitStyles = {\n  ...buttonStyles,\n  marginTop: 20,\n  backgroundColor: \"#00b06f\",\n  color: \"white\"\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [options[0]],\n      options,\n      submitted: false\n    };\n    this.container = createRef();\n  }\n\n  onDragEnd = result => {\n    // dropped outside the list\n    if (!result.destination) {\n      return;\n    }\n\n    const items = reorder(\n      this.state.items,\n      result.source.index,\n      result.destination.index\n    );\n\n    this.setState({\n      items\n    });\n  };\n\n  handleChange = event => {\n    const {\n      target,\n      target: { value, previousValue, id }\n    } = event;\n    const {\n      container: { current: container },\n      state: { options, items }\n    } = this;\n    const menus = container.querySelectorAll(\"select\");\n    const menuId = parseInt(id.slice(-1));\n    const hasPreviousValue = previousValue && previousValue !== \"skip\";\n    if (hasPreviousValue) {\n      const previousOptionIndex = options.findIndex(\n        o => o.candidate === previousValue\n      );\n      options[previousOptionIndex].selected = false;\n    }\n    if (value !== \"skip\") {\n      const optionIndex = options.findIndex(o => o.candidate === value);\n      options[optionIndex].selected = true;\n      if (!hasPreviousValue && menuId < options.length - 1) {\n        items.push(options[menuId + 1]);\n      }\n    } else if (hasPreviousValue) {\n      menus.forEach((menu, i) => {\n        const { value: menuValue } = menu;\n        if (i > menuId) {\n          items.pop();\n          const option = options.find(o => o.candidate === menuValue);\n          if (option) {\n            option.selected = false;\n          }\n        }\n      });\n    }\n    target.previousValue = value;\n    this.setState({ options, items });\n  };\n\n  handleSubmit = () => {\n    this.setState({ submitted: !this.state.submitted });\n  };\n\n  render() {\n    return (\n      <div ref={this.container}>\n        <h1 style={{ textAlign: \"center\" }}>Rank your favorite candidates</h1>\n        <DragDropContext onDragEnd={this.onDragEnd}>\n          <Droppable droppableId=\"droppable\">\n            {(provided, snapshot) => (\n              <form\n                ref={provided.innerRef}\n                style={getListStyle(snapshot.isDraggingOver)}\n              >\n                {this.state.items.map((item, i) => (\n                  <Draggable key={item.id} draggableId={item.id} index={i}>\n                    {(provided, snapshot) => (\n                      <div\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        style={{\n                          ...getItemStyle(\n                            snapshot.isDragging,\n                            provided.draggableProps.style\n                          ),\n                          ...optionStyles\n                        }}\n                        key={item.candidate}\n                      >\n                        <label style={itemStyles} htmlFor={`menu-${i}`}>\n                          {i + 1}\n                        </label>\n                        <select\n                          id={`menu-${i}`}\n                          style={dropdownStyles}\n                          onChange={this.handleChange}\n                        >\n                          <option defaultValue value=\"skip\">\n                            Select an option (or skip)\n                          </option>\n                          {this.state.options.map((o, j) => (\n                            <option\n                              key={o.candidate}\n                              value={o.candidate}\n                              disabled={o.selected}\n                            >\n                              {o.candidate}\n                            </option>\n                          ))}\n                        </select>\n                      </div>\n                    )}\n                  </Draggable>\n                ))}\n                {provided.placeholder}\n                <div onClick={this.handleSubmit} style={submitStyles}>\n                  {this.state.submitted ? \"Nice!\" : \"Submit\"}\n                </div>\n              </form>\n            )}\n          </Droppable>\n        </DragDropContext>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}