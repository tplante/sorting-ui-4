{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["SKIP_VALUE","options","candidate","id","selected","reorder","list","startIndex","endIndex","result","Array","from","_result$splice","splice","removed","Object","slicedToArray","iconStyles","opacity","transition","position","left","top","width","height","viewBox","concat","fill","buttonStyles","padding","GRID_SIZE","textAlign","fontWeight","cursor","borderRadius","optionStyles","itemStyles","display","marginRight","backgroundColor","color","dropdownStyles","fontSize","submitStyles","objectSpread","marginTop","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleDragEnd","dragEvent","container","assertThisInitialized","current","destination","source","draggableId","menu","querySelector","menus","querySelectorAll","preventReorder","value","some","m","i","index","items","state","setState","handleChange","event","target","_event$target","previousValue","_assertThisInitialize2","_assertThisInitialize3","menuId","parseInt","slice","hasPreviousValue","previousOptionIndex","findIndex","o","optionIndex","showIcon","length","push","forEach","menuValue","pop","option","find","handleSubmit","submitted","createRef","_this2","react_default","a","createElement","ref","style","react_beautiful_dnd_esm","onDragEnd","droppableId","provided","snapshot","innerRef","isDraggingOver","margin","map","item","key","assign","draggableProps","dragHandleProps","isDragging","draggableStyle","userSelect","background","d","htmlFor","onChange","defaultValue","j","disabled","placeholder","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b2136603.chunk.js","sourcesContent":["import React, { Component, createRef } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\nconst SKIP_VALUE = \"skip\";\nconst ICON_SIZE = 25;\nconst GRID_SIZE = 20;\nconst options = [\n  {\n    candidate: \"Barack Obama\",\n    id: \"option-0\",\n    selected: false\n  },\n  {\n    candidate: \"George Bush\",\n    id: \"option-1\",\n    selected: false\n  },\n  {\n    candidate: \"Hillary Clinton\",\n    id: \"option-2\",\n    selected: false\n  },\n  {\n    candidate: \"Bernie Sanders\",\n    id: \"option-3\",\n    selected: false\n  },\n  {\n    candidate: \"Marco Rubio\",\n    id: \"option-4\",\n    selected: false\n  },\n  {\n    candidate: \"George Washington\",\n    id: \"option-5\",\n    selected: false\n  },\n  { candidate: \"John Adams\", id: \"option-6\", selected: false },\n  {\n    candidate: \"Abraham Lincoln\",\n    id: \"option-7\",\n    selected: false\n  },\n  {\n    candidate: \"Franklin D. Roosevelt\",\n    id: \"option-8\",\n    selected: false\n  },\n  { candidate: \"Ron Swanson\", id: \"option-9\", selected: false }\n];\n\n// Reorder the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  position: \"relative\",\n  userSelect: \"none\",\n  padding: GRID_SIZE,\n  margin: `0 0 ${GRID_SIZE / 2}px 0`,\n  // Change background colour if dragging\n  background: isDragging ? \"lightgreen\" : \"#d8d8d8\",\n  // Styles to apply on draggables\n  ...draggableStyle\n});\nconst getListStyle = isDraggingOver => ({\n  width: 315,\n  margin: \"0 auto\"\n});\n\nconst iconStyles = {\n  opacity: 0,\n  transition: \"0.2s ease-in-out\",\n  position: \"absolute\",\n  left: -ICON_SIZE,\n  top: GRID_SIZE,\n  width: ICON_SIZE,\n  height: ICON_SIZE,\n  viewBox: `0 0 ${ICON_SIZE} ${ICON_SIZE}`,\n  fill: \"#2c5c6c\"\n};\nconst buttonStyles = {\n  width: \"100%\",\n  padding: `${GRID_SIZE / 2}px 0`,\n  textAlign: \"center\",\n  fontWeight: \"bold\",\n  cursor: \"pointer\",\n  borderRadius: 3\n};\nconst optionStyles = {\n  textAlign: \"left\",\n  fontWeight: \"bold\",\n  cursor: \"pointer\",\n  borderRadius: 3,\n  padding: 0\n};\nconst itemStyles = {\n  display: \"inline-block\",\n  textAlign: \"center\",\n  width: GRID_SIZE,\n  marginRight: GRID_SIZE,\n  padding: GRID_SIZE,\n  backgroundColor: \"#2c5c6c\",\n  color: \"white\",\n  borderRadius: \"3px 0 0 3px\",\n  cursor: \"pointer\"\n};\nconst dropdownStyles = {\n  fontSize: 16\n};\nconst submitStyles = {\n  ...buttonStyles,\n  marginTop: GRID_SIZE,\n  backgroundColor: \"#00b06f\",\n  color: \"white\"\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [options[0]],\n      options,\n      submitted: false,\n      showIcon: false\n    };\n    this.container = createRef();\n  }\n\n  handleDragEnd = dragEvent => {\n    const {\n      container: { current: container }\n    } = this;\n    const { destination, source, draggableId } = dragEvent;\n    const menu = container.querySelector(`#${draggableId} select`);\n    // Convert NodeList to array\n    const menus = Array.from(container.querySelectorAll(\"select\"));\n    const preventReorder =\n      menu.value === SKIP_VALUE ||\n      menus.some(\n        (m, i) =>\n          m.value === SKIP_VALUE && destination && destination.index === i\n      );\n    // Dropped outside the list or an empty option is not last index\n    if (!destination || preventReorder) {\n      return;\n    }\n    const items = reorder(this.state.items, source.index, destination.index);\n    this.setState({ items });\n  };\n\n  handleChange = event => {\n    const {\n      target,\n      target: { value, previousValue, id }\n    } = event;\n    const {\n      container: { current: container },\n      state: { options, items }\n    } = this;\n    const menus = container.querySelectorAll(\"select\");\n    const menuId = parseInt(id.slice(-1));\n    const hasPreviousValue = previousValue && previousValue !== SKIP_VALUE;\n    if (hasPreviousValue) {\n      const previousOptionIndex = options.findIndex(\n        o => o.id === previousValue\n      );\n      options[previousOptionIndex].selected = false;\n    }\n    if (value !== SKIP_VALUE) {\n      const optionIndex = options.findIndex(o => o.id === value);\n      options[optionIndex].selected = true;\n      if (!hasPreviousValue && menuId > 0) {\n        this.setState({\n          showIcon: true\n        });\n      }\n      if (!hasPreviousValue && menuId < options.length - 1) {\n        items.push(options[menuId + 1]);\n      }\n    } else if (hasPreviousValue) {\n      menus.forEach((menu, i) => {\n        const { value: menuValue } = menu;\n        if (i > menuId) {\n          items.pop();\n          const option = options.find(o => o.id === menuValue);\n          if (option) {\n            option.selected = false;\n          }\n        }\n      });\n    }\n    target.previousValue = value;\n    this.setState({ options, items });\n  };\n\n  handleSubmit = () => {\n    this.setState({ submitted: !this.state.submitted });\n  };\n\n  render() {\n    return (\n      <div ref={this.container}>\n        <h1 style={{ textAlign: \"center\" }}>Rank your favorite candidates</h1>\n        <DragDropContext onDragEnd={this.handleDragEnd}>\n          <Droppable droppableId=\"droppable\">\n            {(provided, snapshot) => (\n              <form\n                ref={provided.innerRef}\n                style={getListStyle(snapshot.isDraggingOver)}\n              >\n                {this.state.items.map((item, i) => (\n                  <Draggable key={item.id} draggableId={item.id} index={i}>\n                    {(provided, snapshot) => (\n                      <div\n                        id={`option-${i}`}\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        style={{\n                          ...getItemStyle(\n                            snapshot.isDragging,\n                            provided.draggableProps.style\n                          ),\n                          ...optionStyles\n                        }}\n                        key={item.id}\n                      >\n                        {i < this.state.items.length - 1 && (\n                          <svg\n                            style={{\n                              ...iconStyles,\n                              opacity: this.state.showIcon ? 1 : 0\n                            }}\n                          >\n                            <path\n                              d=\"M13.7578943,16.6318165 L10.6642975,19.7254012 C10.2981644,20.0915329 9.70460909,20.0915329 9.33847592,19.7254012 L6.24487915,16.6318165 C5.65429263,16.0412323 6.07257429,15.0313915 6.90780948,15.0314306 L8.90632706,15.0314306 L8.90628799,11.0937468 L4.9686279,11.0937468 L4.9686279,13.0922566 C4.9686279,13.9274885 3.95882223,14.3457685 3.36819665,13.7551843 L0.274599878,10.6615996 C-0.0915332925,10.2954679 -0.0915332925,9.70187587 0.274599878,9.3357832 L3.36819665,6.24219851 C3.95878316,5.6516143 4.9686279,6.06989433 4.9686279,6.90512625 L4.9686279,8.9062532 L8.90628799,8.9062532 L8.90628799,4.96860849 L6.90511417,4.96860849 C6.06987897,4.96860849 5.65159732,3.95880676 6.24218383,3.36818349 L9.3357806,0.274598805 C9.70191377,-0.091532935 10.295469,-0.091532935 10.6616022,0.274598805 L13.755199,3.36818349 C14.3457855,3.9587677 13.9275038,4.96860849 13.0922686,4.96860849 L11.0937511,4.96860849 L11.0937511,8.9062532 L15.0314112,8.9062532 L15.0314112,6.90774343 C15.0314112,6.07251151 16.0412168,5.65423148 16.6318034,6.24481569 L19.7254001,9.33840038 C20.0915333,9.70453212 20.0915333,10.2981241 19.7254001,10.6642168 L16.6318034,13.7578015 C16.0412168,14.3483857 15.0313721,13.9301057 15.0314112,13.0948737 L15.0314112,11.0937468 L11.0937901,11.0937468 L11.0937901,15.0313915 L13.094964,15.0313915 C13.9301992,15.0313915 14.3484808,16.0411932 13.7578943,16.6318165 Z\"\n                              id=\"Path\"\n                            />\n                          </svg>\n                        )}\n                        <label style={itemStyles} htmlFor={`menu-${i}`}>\n                          {i + 1}\n                        </label>\n                        <select\n                          id={`menu-${i}`}\n                          style={dropdownStyles}\n                          onChange={this.handleChange}\n                        >\n                          <option defaultValue value={SKIP_VALUE}>\n                            Select an option (or skip)\n                          </option>\n                          {this.state.options.map((o, j) => (\n                            <option\n                              key={o.id}\n                              value={o.id}\n                              disabled={o.selected}\n                            >\n                              {o.candidate}\n                            </option>\n                          ))}\n                        </select>\n                      </div>\n                    )}\n                  </Draggable>\n                ))}\n                {provided.placeholder}\n                <div onClick={this.handleSubmit} style={submitStyles}>\n                  {this.state.submitted ? \"Nice!\" : \"Submit\"}\n                </div>\n              </form>\n            )}\n          </Droppable>\n        </DragDropContext>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}